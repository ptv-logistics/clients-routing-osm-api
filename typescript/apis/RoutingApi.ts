/* tslint:disable */
/* eslint-disable */
/**
 * Routing OSM
 * With the Routing OSM service you can calculate routes from a list of waypoints based on open street map data.
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  Options,
  Results,
  RouteResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    OptionsFromJSON,
    OptionsToJSON,
    ResultsFromJSON,
    ResultsToJSON,
    RouteResponseFromJSON,
    RouteResponseToJSON,
} from '../models/index';

export interface CalculateRouteRequest {
    waypoints?: Array<string>;
    profile?: string;
    options?: Options;
    results?: Array<Results>;
}

/**
 * 
 */
export class RoutingApi extends runtime.BaseAPI {

    /**
     * Calculates a route by specifying a list of waypoints.
     */
    async calculateRouteRaw(requestParameters: CalculateRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RouteResponse>> {
        const queryParameters: any = {};

        if (requestParameters['waypoints'] != null) {
            queryParameters['waypoints'] = requestParameters['waypoints'];
        }

        if (requestParameters['profile'] != null) {
            queryParameters['profile'] = requestParameters['profile'];
        }

        if (requestParameters['options'] != null) {
            queryParameters['options'] = requestParameters['options'];
        }

        if (requestParameters['results'] != null) {
            queryParameters['results'] = requestParameters['results']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/routes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RouteResponseFromJSON(jsonValue));
    }

    /**
     * Calculates a route by specifying a list of waypoints.
     */
    async calculateRoute(requestParameters: CalculateRouteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RouteResponse> {
        const response = await this.calculateRouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
